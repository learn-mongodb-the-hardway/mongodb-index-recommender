buildscript {

    ext {
        githubRepo = "https://learn-mongodb-the-hardway.github.io/mongodb-index-recommender"

        kotlinVersion = '1.3.11'
        junitPlatformVersion = '1.0.2'
        kotlinterVersion = '1.12.0'
        kotlinLoggingVersion = '1.4.8'

        mongodbDriverVersion = '3.6.3'

        junitVersion = '5.1.0'
        hamkrestVersion = '1.4.2.2'
        logbackVersion = '1.2.3'

        githubReleaseVersion = '1.0.9'
        grgitVersion = '2.1.1'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "gradle.plugin.org.jmailen.gradle:kotlinter-gradle:$kotlinterVersion"
        classpath "gradle.plugin.com.github.breadmoirai:github-release:$githubReleaseVersion"
        classpath "org.ajoberstar:grgit:$grgitVersion"
    }

    configurations.classpath {
        resolutionStrategy {
            cacheDynamicVersionsFor 0, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.jmailen.kotlinter'

    group "com.mconsulting.$productName"

    sourceCompatibility = 1.8

    buildscript {
        repositories {
            mavenCentral()
            jcenter()
            maven { url 'https://jitpack.io' }
            maven { url "https://plugins.gradle.org/m2/" }
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        compile "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"
        compile "org.mongodb:mongodb-driver:$mongodbDriverVersion"

        testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testCompile "org.junit.jupiter:junit-jupiter-params:$junitVersion"
        testCompile "org.jetbrains.kotlin:kotlin-test"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit"
        testCompile "com.natpryce:hamkrest:$hamkrestVersion"

        testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
    }

    archivesBaseName = "$productName-$name"

    test {
        useJUnitPlatform {
            excludeTags project.hasProperty("includeIntegrationTests") ? '' : 'integration'
        }
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    kotlinter {
        indentSize = 4
        continuationIndentSize = 4
        reporters = ['checkstyle', 'plain', 'html']
    }

    lintKotlinMain {
        exclude '**/vendors/*'
    }

    lintKotlinTest {
        exclude '**/vendors/*'
    }
}

apply plugin: 'com.github.breadmoirai.github-release'
apply plugin: 'org.ajoberstar.grgit'

configurations {
    archives
}

dependencies {
//    compile project(path: 'cli-schema', configuration: 'shadow')
    archives project(path: ':cli-schema', configuration: "shadow")
}

githubRelease {
    token = project.findProperty('githubReleaseToken') ?: ''
    owner = 'learn-mongodb-the-hardway'
    repo = 'mongodb-schema-tool'
    name = version
    draft = true
    prerelease = true
    releaseAssets = configurations.archives.filter { it.name.endsWith("jar") }
}
tasks.githubRelease.dependsOn 'dist'

task clean(type: Delete) {
    delete 'build/distributions'
}

task dist(type: Copy) {
    from configurations.archives.filter { it.name.endsWith("jar") }
    into 'build/distributions'
}

task release {
    dependsOn 'githubRelease'
}

task generateDocs(type:Exec) {
    workingDir './'

    //on windows:
    commandLine "cmd", "/c", "hugo -s ./docs_template -b $githubRepo -d ../docs"

    //on linux
    commandLine "./generate_docs.sh", githubRepo

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}